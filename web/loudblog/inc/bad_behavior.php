<?php

// ----------------------------------------------------- //
// LoudBlog                                              //
// easy-to-use audioblogging and podcasting              //
// Version 0.7.1 (2007-10-30)                            // 
// http://www.loudblog.com                               //
//                                                       //
// Written by Sebastian Steins (sebastian@loudblog.com)  //
//                                                       //
// Released under the Gnu General Public License         //
// http://www.gnu.org/copyleft/gpl.html                  //
//                                                       //
// Have Fun! Drop me a line if you like LoudBlog!        //
// ----------------------------------------------------- //


/*
http://www.bad-behavior.ioerror.us/

Bad Behavior - detects and blocks unwanted Web accesses
Copyright (C) 2005 Michael Hampton

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/


// This file is the entry point for Bad Behavior in LoudBlog.
if (!isset($GLOBALS['settings'])) die('No valid configuration!');

define('BB2_CWD', $GLOBALS['path'].'/loudblog/inc' );
define('BB2_EMERGENCY_EMAIL', $GLOBALS['settings']['emergency_email'] );

// Bad Behavior callback functions.

// Return current time in the format preferred by your database.
function bb2_db_date() {
	return gmdate('Y-m-d H:i:s');
}

// Return affected rows from most recent query.
function bb2_db_affected_rows() {
	return $GLOBALS['lbdata']->Affected_Rows();
}

// Escape a string for database usage
function bb2_db_escape($string) {
	return $string;
#	return $GLOBALS['lbdata']->Quote($string);
}

// Return the number of rows in a particular query.
function bb2_db_num_rows($result) {
	return $result->RecordCount();
}

// Run a query and return the results, if any.
// Should return FALSE if an error occurred.
function bb2_db_query($query) {
	$result = $GLOBALS['lbdata']->Execute( $query );
	if (!$result) return false;
	return $result;
}

// Return all rows in a particular query.
// Should contain an array of all rows generated by calling mysql_fetch_assoc()
// or equivalent and appending the result of each call to an array.
function bb2_db_rows($result) {
	$rows = array();
	while( $row = $result->FetchRow()) {
		$rows[] = $row;
	}
	return $rows;
}

// Return emergency contact email address.
function bb2_email() {
	return BB2_EMERGENCY_EMAIL;
}

// retrieve settings from lifetype config
function bb2_read_settings() {

	$displayStats = isset($GLOBALS['settings']['bb2_display_stats']) ? $GLOBALS['settings']['bb2_display_stats'] : true;
	$verbose      =	isset($GLOBALS['settings']['bb2_verbose'])       ? $GLOBALS['settings']['bb2_verbose']       : "0";
	$strict       = isset($GLOBALS['settings']['bb2_strict'])        ? $GLOBALS['settings']['bb2_strict']        : "0";
	$isInstalled  = isset($GLOBALS['settings']['bb2_installed'])     ? $GLOBALS['settings']['bb2_installed']     : false;
	
	return array('log_table' => $GLOBALS['prefix'] . 'bad_behavior', 
				 'display_stats' => $displayStats,
				 'verbose' => $verbose,
				 'strict'  => $strict,
				 'is_installed' => $isInstalled );
}

// write settings to lifetype config
function bb2_write_settings($settings) {
	$query = "REPLACE INTO ".$GLOBALS['prefix']."lb_settings (name,value) VALUES ('bb2_display_stats', '".$settings['display_stats']."')";
	$GLOBALS['lbdata']->Execute($query);
	
	$query = "REPLACE INTO ".$GLOBALS['prefix']."lb_settings (name,value) VALUES ('bb2_verbose', '".$settings['verbose']."')";
	$GLOBALS['lbdata']->Execute($query);

	$query = "REPLACE INTO ".$GLOBALS['prefix']."lb_settings (name,value) VALUES ('bb2_strict', '".$settings['strict']."')";
	$GLOBALS['lbdata']->Execute($query);
	
	$query = "REPLACE INTO ".$GLOBALS['prefix']."lb_settings (name,value) VALUES ('bb2_installed', '".$settings['is_installed']."')";
	$GLOBALS['lbdata']->Execute($query);
}
	
// installation
function bb2_install() {
	$settings = bb2_read_settings();
	if( $settings['is_installed'] == false )
	{
		bb2_db_query(bb2_table_structure($settings['log_table']));
		$settings['is_installed'] = true;
		bb2_write_settings( $settings );
	}
}

// Return the top-level relative path of wherever we are (for cookies)
function bb2_relative_path() {
	$url = parse_url( $GLOBALS['settings']['url'] );
	if( empty($url['path']) )
		return '/';
	else {
		if( substr( $url['path'], -1, 1 ) == '/' )
			return $url['path'];
		else
			return $url['path'] . '/';
	}
}

// Start Bad Behavior investigation
require_once(BB2_CWD . "/bad-behavior/version.inc.php");
require_once(BB2_CWD . "/bad-behavior/core.inc.php");
bb2_install();
$bb2_settings = bb2_read_settings();
bb2_start($bb2_settings);
?>